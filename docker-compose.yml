version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    environment:
      - POSTGRES_DB=openpolicy
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data:/data
    networks:
      - openpolicy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - openpolicy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scraper Service
  scraper-service:
    build:
      context: ./services/scraper-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/openpolicy
      - REDIS_URL=redis://redis:6379/1
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/scraper-service:/app
      - ./data:/app/data
      - scraper_data:/app/data
      - scraper_logs:/app/logs
    networks:
      - openpolicy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ETL Service
  etl-service:
    build:
      context: ./services/etl
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_NAME=openpolicy
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_HOST=0.0.0.0
      - API_PORT=8003
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/etl:/app
      - ./data:/app/data
      - etl_data:/app/data
      - etl_logs:/app/logs
    networks:
      - openpolicy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway Service (placeholder)
  api-gateway:
    image: nginx:alpine
    ports:
      - "8000:80"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    depends_on:
      - scraper-service
      - etl-service
    networks:
      - openpolicy-network
    command: >
      sh -c "echo 'API Gateway placeholder - service not yet implemented' && 
             echo 'server { listen 80; location / { return 200 \"API Gateway coming soon\"; } }' > /etc/nginx/conf.d/default.conf &&
             nginx -g 'daemon off;'"

volumes:
  postgres_data:
  redis_data:
  scraper_data:
  scraper_logs:
  etl_data:
  etl_logs:

networks:
  openpolicy-network:
    driver: bridge 