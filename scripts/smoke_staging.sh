#!/usr/bin/env bash
set -euo pipefail

NAMESPACE=${NAMESPACE:-openpolicy-stg}
API_SVC=api-gateway
WEB_SVC=web
ETL_SVC=etl
ADMIN_SVC=admin
SCRAPER_SVC=scraper
POLICY_SVC=policy
SEARCH_SVC=search
AUTH_SVC=auth

echo "üöÄ Running staging smoke tests against namespace: $NAMESPACE"

# Check if we're in staging context
CURRENT_CONTEXT=$(kubectl config current-context)
if [[ "$CURRENT_CONTEXT" != "staging" ]]; then
    echo "‚ö†Ô∏è  Warning: Current context is '$CURRENT_CONTEXT', expected 'staging'"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Aborting staging smoke tests"
        exit 1
    fi
fi

echo "üîç Testing API Gateway..."
kubectl -n "$NAMESPACE" exec -it deployment/api-gateway -- curl -fsS http://localhost:8080/healthz >/dev/null || { echo "‚ùå API Gateway health check failed"; exit 1; }
kubectl -n "$NAMESPACE" exec -it deployment/api-gateway -- curl -fsS http://localhost:8080/readyz >/dev/null || { echo "‚ùå API Gateway readiness check failed"; exit 1; }
kubectl -n "$NAMESPACE" exec -it deployment/api-gateway -- curl -fsS http://localhost:8080/version >/dev/null || { echo "‚ùå API Gateway version check failed"; exit 1; }

echo "üîç Testing Web Frontend..."
kubectl -n "$NAMESPACE" exec -it deployment/web -- curl -fsS http://localhost:3000/ >/dev/null || { echo "‚ùå Web frontend check failed"; exit 1; }

echo "üîç Testing ETL Service..."
kubectl -n "$NAMESPACE" exec -it deployment/etl -- curl -fsS http://localhost:8003/healthz >/dev/null || { echo "‚ùå ETL service health check failed"; exit 1; }
kubectl -n "$NAMESPACE" exec -it deployment/etl -- curl -fsS http://localhost:8003/readyz >/dev/null || { echo "‚ùå ETL service readiness check failed"; exit 1; }

echo "üîç Testing Admin Interface..."
kubectl -n "$NAMESPACE" exec -it deployment/admin -- curl -fsS http://localhost:3001/ >/dev/null || { echo "‚ùå Admin interface check failed"; exit 1; }

echo "üîç Testing Scraper Service..."
kubectl -n "$NAMESPACE" exec -it deployment/scraper -- curl -fsS http://localhost:8005/healthz >/dev/null || { echo "‚ùå Scraper service health check failed"; exit 1; }
kubectl -n "$NAMESPACE" exec -it deployment/scraper -- curl -fsS http://localhost:8005/readyz >/dev/null || { echo "‚ùå Scraper service readiness check failed"; exit 1; }

echo "üîç Testing Policy Service..."
kubectl -n "$NAMESPACE" exec -it deployment/policy -- curl -fsS http://localhost:8011/healthz >/dev/null || { echo "‚ùå Policy service health check failed"; exit 1; }

echo "üîç Testing Search Service..."
kubectl -n "$NAMESPACE" exec -it deployment/search -- curl -fsS http://localhost:8010/healthz >/dev/null || { echo "‚ùå Search service health check failed"; exit 1; }

echo "üîç Testing Auth Service..."
kubectl -n "$NAMESPACE" exec -it deployment/auth -- curl -fsS http://localhost:8009/healthz >/dev/null || { echo "‚ùå Auth service health check failed"; exit 1; }

echo "üîç Testing Service Discovery..."
kubectl -n "$NAMESPACE" get svc | grep -q api-gateway || { echo "‚ùå API Gateway service not found"; exit 1; }
kubectl -n "$NAMESPACE" get svc | grep -q web || { echo "‚ùå Web service not found"; exit 1; }

echo "üîç Testing Database Connectivity..."
kubectl -n "$NAMESPACE" exec -it deployment/etl -- python -c "
import psycopg2
try:
    conn = psycopg2.connect(
        host='postgres',
        database='openpolicy',
        user='postgres',
        password='password'
    )
    conn.close()
    print('Database connection successful')
except Exception as e:
    print(f'Database connection failed: {e}')
    exit(1)
" || { echo "‚ùå Database connectivity test failed"; exit 1; }

echo "‚úÖ All staging smoke tests passed successfully!"
